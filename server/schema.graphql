#schema {
#    query: Query
#    mutation: Mutation
#    subscription:Subscription
#}

interface Node {
    id: ID!
}
type PageInfo {
    startCursor: String,
    endCursor: String,
    hasNextPage: Boolean!,
    hasPreviousPage: Boolean!
}
type Viewer{
    username: String
}
input ArticleInput {
    keyword: String,
    score:Float,
}
type Tag implements Node{
    id:ID!
    name: String!
    articles(first:Int,after:String,last:Int,before:String,box:String,read:String="all",priority:Int=0,search:ArticleInput):ArticleConnection
}
type TagConnection {
    pageInfo: PageInfo!
    edges: [TagEdge!]!
}
type TagEdge  {
    cursor: String!
    node: Tag!
}
type Topic implements Node{
    id:ID!
    name:String!
    articles(first:Int,after:String,last:Int,before:String,box:String,read:String="all",priority:Int=0,search:ArticleInput):ArticleConnection
}
type TopicConnection {
    pageInfo: PageInfo!
    edges: [TopicEdge!]!
}
type TopicEdge  {
    cursor: String!
    node: Topic!
}
type Article implements Node {
    id: ID!
    title: String
    summary: String
    link: String
    time: String
    feed: Feed
    tags: [String]
    topic: String
    box: String
    priority: Int!
    series: Series
}

type ArticleConnection {
    pageInfo: PageInfo!
    edges: [ArticleEdge!]!
}
type ArticleEdge  {
    cursor: String!
    node: Article!
}

type Feed implements Node{
    id:ID!
    link:String!
    title:String
    articles(first:Int,after:String,last:Int,before:String,box:String,read:String="all",priority:Int=0,search:ArticleInput):ArticleConnection
}
type FeedConnection {
    pageInfo: PageInfo!
    edges: [FeedEdge!]!
}
type FeedEdge  {
    cursor: String!
    node: Feed!
}
type Series implements Node{
    id:ID!
    title: String!
    articles(page:PageInput,box:String,read:String="all",priority:Int=0,search:ArticleInput):ArticleConnection
}
type SeriesConnection {
    pageInfo: PageInfo!
    edges: [SeriesEdge!]!
}
type SeriesEdge  {
    cursor: String!
    node: Series!
}
input PageInput{
    first:Int
    after:String
    last:Int
    before:String
}
# The "Query" type is the root of all GraphQL queries.
# (A "Mutation" type will be covered later on.)
type Query {
    articles(first:Int,after:String,last:Int,before:String,box:String,read:String="all",priority:Int=0,search:ArticleInput): ArticleConnection
    viewer: Viewer
    node(id: ID!,type:String): Node
    feeds(first:Int,after:String,last:Int,before:String):FeedConnection
    tags:TagConnection
    topics:TopicConnection
    series(page:PageInput):SeriesConnection
}
type Mutation {
    addArticle(title: String, summary: String,link:String,time:String,feedId:String):Article
    addFeed(link:String!,title:String):Feed
    markReaded(id:String):Article
    markReadedBatch(ids:[String]):[Article]
    markSpam(id:String):Article
    markSpamBatch(ids:[String]):[Article]
}
type Subscription {
    articleAdded: Article
    feedAdded:Feed
}
